Metadata-Version: 2.1
Name: auto-bia
Version: 0.1
Summary: Goo lets you simulate cells with Blender
Home-page: https://github.com/smegason/Goo/
Author: Antoine A. Ruzette
Author-email: megason@hms.harvard.edu
License: BSD-2-Clause
Project-URL: Documentation, https://smegason.github.io/Goo/docs/
Project-URL: GitHub Project, https://github.com/smegason/Goo
Project-URL: Issue Tracker, https://github.com/smegason/Goo/issues
Classifier: Framework :: Pytest
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: opencv-python
Requires-Dist: scikit-image
Provides-Extra: dev
Requires-Dist: black==20.8b1; extra == "dev"
Requires-Dist: bump2version==1.0.1; extra == "dev"
Requires-Dist: flake8==3.9.2; extra == "dev"
Requires-Dist: flake8-implicit-str-concat==0.2.0; extra == "dev"
Requires-Dist: flake8-print==4.0.0; extra == "dev"
Requires-Dist: isort==5.9.1; extra == "dev"
Requires-Dist: pre-commit==2.13.0; extra == "dev"
Requires-Dist: yamllint==1.26.1; extra == "dev"
Provides-Extra: lint
Requires-Dist: black==20.8b1; extra == "lint"
Requires-Dist: flake8==3.9.2; extra == "lint"
Requires-Dist: flake8-implicit-str-concat==0.2.0; extra == "lint"
Requires-Dist: flake8-print==4.0.0; extra == "lint"
Requires-Dist: isort==5.9.1; extra == "lint"
Requires-Dist: yamllint==1.26.1; extra == "lint"
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-cov; extra == "test"

[![License](https://img.shields.io/pypi/l/microsim.svg?color=green)](https://github.com/antoineruzette/auto-bia-workflow/blob/main/LICENSE)
[![PyPI](https://img.shields.io/pypi/v/auto-bia-workflow.svg?color=green)](https://pypi.org/project/auto-bia-workflow/)
[![Python Version](https://img.shields.io/pypi/pyversions/auto-bia-workflow.svg?color=green)](https://python.org)

# OptiBIA

Optimize image analysis workflows with OptiBIA.

OptiBIA allows users to create and apply various image processing operators in a sequential manner, and optimize their parameters to achieve best results in various tasks - for now focusing on segmentation. 

## Installation

1. **Clone the repository**: Clone this repository to your local machine using Git.
The library is not stable at this point and new features are added regularly. For now, the best way to install the library is to clone the repository and locally install the package using pip.

    ```bash
    git clone https://github.com/antoineruzette/auto-bia-workflow.git
    ```
2. **Install the dependencies**: Install the dependencies using pip.

    ```bash
    conda create -n optiBIA python=3.10
    ```

    ```bash
    pip install -r requirements.txt
    ```
3. **Install the package**: Install the package using pip.

    ```bash
    pip install dist/auto_bia-0.1-py3-none-any.whl
    ```

## Usage
Construct a workflow by adding operators and setting their initial parameters, then optimize workflow using the `optimize` method. The `optimize` method uses a gradient descent algorithm to find the best parameters for the operators in the workflow.

```python

from auto_bia import bia_workflow as biaw

# Create an image analysis workflow
workflow = biaw.ImageAnalysisWorkflow(
    operators = [
        biaw.SmoothingOperator(kernel_size=5),
        biaw.SegmentationOperator(threshold=30)
        ], 
    cutoff=0.95, 
    learning_rate=0.1
    )

# Run it
image_path = "/tests/images/original.png"
mask_path = "/tests/images/mask.png"
result_save_path = "/tests/images/result.png"
workflow.run(
    image_input=image_path, 
    mask_input=mask_path, 
    result_save_path
    )
```
